{
    "_comment": "clang-format Options Translations - Part 1 (Basic & Alignment & Spacing)",
    "clangFormat.option.BasedOnStyle.name": "Based On Style",
    "clangFormat.option.BasedOnStyle.description": "The base coding style to inherit from. All options not explicitly set in the current configuration file will be inherited from this base style.",
    "clangFormat.option.AccessModifierOffset.name": "Access Modifier Offset",
    "clangFormat.option.AccessModifierOffset.description": "Extra indentation or outdent for access modifiers (e.g., public:, private:). Negative values indicate outdent (shift left).",
    "clangFormat.option.AlignAfterOpenBracket.name": "Align After Open Bracket",
    "clangFormat.option.AlignAfterOpenBracket.description": "Controls how parameters are aligned after an opening bracket.",
    "clangFormat.option.AlignArrayOfStructures.name": "Align Array of Structures",
    "clangFormat.option.AlignArrayOfStructures.description": "If not None, fields will be aligned in columns when using struct array initialization.",
    "clangFormat.option.AlignConsecutiveAssignments.name": "Align Consecutive Assignments",
    "clangFormat.option.AlignConsecutiveAssignments.description": "Alignment style for consecutive assignment statements.",
    "clangFormat.option.AlignConsecutiveBitFields.name": "Align Consecutive Bit Fields",
    "clangFormat.option.AlignConsecutiveBitFields.description": "Alignment style for consecutive bit fields.",
    "clangFormat.option.AlignConsecutiveDeclarations.name": "Align Consecutive Declarations",
    "clangFormat.option.AlignConsecutiveDeclarations.description": "Alignment style for consecutive variable declarations.",
    "clangFormat.option.AlignConsecutiveMacros.name": "Align Consecutive Macros",
    "clangFormat.option.AlignConsecutiveMacros.description": "Alignment style for consecutive macro definitions.",
    "clangFormat.option.AlignConsecutiveShortCaseStatements.name": "Align Consecutive Short Case Statements",
    "clangFormat.option.AlignConsecutiveShortCaseStatements.description": "Alignment style for consecutive short case statements.",
    "clangFormat.option.AlignEscapedNewlines.name": "Align Escaped Newlines",
    "clangFormat.option.AlignEscapedNewlines.description": "Controls alignment of escaped newlines in macros.",
    "clangFormat.option.AlignOperands.name": "Align Operands",
    "clangFormat.option.AlignOperands.description": "Controls alignment of binary and ternary expression operands.",
    "clangFormat.option.AlignTrailingComments.name": "Align Trailing Comments",
    "clangFormat.option.AlignTrailingComments.description": "Controls alignment of trailing comments.",
    "clangFormat.option.AllowAllArgumentsOnNextLine.name": "Allow All Arguments On Next Line",
    "clangFormat.option.AllowAllArgumentsOnNextLine.description": "If true, allows all function call arguments to be placed on the next line when the function call doesn't fit on a single line.",
    "clangFormat.option.AllowAllParametersOfDeclarationOnNextLine.name": "Allow All Parameters Of Declaration On Next Line",
    "clangFormat.option.AllowAllParametersOfDeclarationOnNextLine.description": "If true, allows all function declaration parameters to be placed on the next line.",
    "clangFormat.option.AllowBreakBeforeNoexceptSpecifier.name": "Allow Break Before Noexcept Specifier",
    "clangFormat.option.AllowBreakBeforeNoexceptSpecifier.description": "Controls whether a line break before the noexcept specifier is allowed.",
    "clangFormat.option.AllowShortBlocksOnASingleLine.name": "Allow Short Blocks On A Single Line",
    "clangFormat.option.AllowShortBlocksOnASingleLine.description": "Allows short blocks to be placed on a single line.",
    "clangFormat.option.AllowShortCaseExpressionOnASingleLine.name": "Allow Short Case Expression On A Single Line",
    "clangFormat.option.AllowShortCaseExpressionOnASingleLine.description": "Allows short case expressions to be placed on a single line.",
    "clangFormat.option.AllowShortCaseLabelsOnASingleLine.name": "Allow Short Case Labels On A Single Line",
    "clangFormat.option.AllowShortCaseLabelsOnASingleLine.description": "If true, short case labels will be contracted to a single line.",
    "clangFormat.option.AllowShortCompoundRequirementOnASingleLine.name": "Allow Short Compound Requirement On A Single Line",
    "clangFormat.option.AllowShortCompoundRequirementOnASingleLine.description": "Allows short compound requirements to be placed on a single line.",
    "clangFormat.option.AllowShortEnumsOnASingleLine.name": "Allow Short Enums On A Single Line",
    "clangFormat.option.AllowShortEnumsOnASingleLine.description": "Allows short enumerations to be placed on a single line.",
    "clangFormat.option.AllowShortFunctionsOnASingleLine.name": "Allow Short Functions On A Single Line",
    "clangFormat.option.AllowShortFunctionsOnASingleLine.description": "Controls which kinds of short functions are allowed to be placed on a single line.",
    "clangFormat.option.AllowShortIfStatementsOnASingleLine.name": "Allow Short If Statements On A Single Line",
    "clangFormat.option.AllowShortIfStatementsOnASingleLine.description": "Controls which kinds of short if statements are allowed to be placed on a single line.",
    "clangFormat.option.AllowShortLambdasOnASingleLine.name": "Allow Short Lambdas On A Single Line",
    "clangFormat.option.AllowShortLambdasOnASingleLine.description": "Controls which kinds of short lambda functions are allowed to be placed on a single line.",
    "clangFormat.option.AllowShortLoopsOnASingleLine.name": "Allow Short Loops On A Single Line",
    "clangFormat.option.AllowShortLoopsOnASingleLine.description": "If true, short loop bodies can be placed on a single line.",
    "clangFormat.option.AllowShortNamespacesOnASingleLine.name": "Allow Short Namespaces On A Single Line",
    "clangFormat.option.AllowShortNamespacesOnASingleLine.description": "If true, short namespace declarations can be contracted to a single line.",
    "clangFormat.option.AlwaysBreakBeforeMultilineStrings.name": "Always Break Before Multiline Strings",
    "clangFormat.option.AlwaysBreakBeforeMultilineStrings.description": "If true, always insert a line break before multiline string literals.",
    "clangFormat.option.BreakBeforeBraces.name": "Break Before Braces",
    "clangFormat.option.BreakBeforeBraces.description": "The brace breaking style to use.",
    "clangFormat.option.BraceWrapping.name": "Brace Wrapping",
    "clangFormat.option.BraceWrapping.description": "Fine-grained control over brace wrapping behavior when BreakBeforeBraces is set to Custom.",
    "clangFormat.option.BreakAdjacentStringLiterals.name": "Break Adjacent String Literals",
    "clangFormat.option.BreakAdjacentStringLiterals.description": "If true, breaks adjacent string literals into separate lines.",
    "clangFormat.option.BreakAfterAttributes.name": "Break After Attributes",
    "clangFormat.option.BreakAfterAttributes.description": "Controls line breaking behavior after attributes.",
    "clangFormat.option.BreakAfterJavaFieldAnnotations.name": "Break After Java Field Annotations",
    "clangFormat.option.BreakAfterJavaFieldAnnotations.description": "If true, breaks after Java field annotations.",
    "clangFormat.option.BreakAfterReturnType.name": "Break After Return Type",
    "clangFormat.option.BreakAfterReturnType.description": "Controls line breaking after the return type in function declarations.",
    "clangFormat.option.BreakArrays.name": "Break Arrays",
    "clangFormat.option.BreakArrays.description": "If true, breaks array initializers into multiple lines.",
    "clangFormat.option.BreakBeforeBinaryOperators.name": "Break Before Binary Operators",
    "clangFormat.option.BreakBeforeBinaryOperators.description": "The way to wrap binary operators.",
    "clangFormat.option.BreakBeforeConceptDeclarations.name": "Break Before Concept Declarations",
    "clangFormat.option.BreakBeforeConceptDeclarations.description": "Controls line breaking before concept declarations.",
    "clangFormat.option.BreakBeforeInlineASMColon.name": "Break Before Inline ASM Colon",
    "clangFormat.option.BreakBeforeInlineASMColon.description": "Controls line breaking before the colon in inline assembly blocks.",
    "clangFormat.option.BreakBeforeTemplateCloser.name": "Break Before Template Closer",
    "clangFormat.option.BreakBeforeTemplateCloser.description": "If true, always break before the closing angle bracket of template parameter lists.",
    "clangFormat.option.BreakBeforeTernaryOperators.name": "Break Before Ternary Operators",
    "clangFormat.option.BreakBeforeTernaryOperators.description": "If true, ternary operators will be placed after line breaks.",
    "clangFormat.option.BreakBinaryOperations.name": "Break Binary Operations",
    "clangFormat.option.BreakBinaryOperations.description": "Controls how binary operations are broken across multiple lines.",
    "clangFormat.option.BreakConstructorInitializers.name": "Break Constructor Initializers",
    "clangFormat.option.BreakConstructorInitializers.description": "The way to wrap constructor initializer lists.",
    "clangFormat.option.BreakFunctionDefinitionParameters.name": "Break Function Definition Parameters",
    "clangFormat.option.BreakFunctionDefinitionParameters.description": "If true, breaks function definition parameters into separate lines.",
    "clangFormat.option.BreakInheritanceList.name": "Break Inheritance List",
    "clangFormat.option.BreakInheritanceList.description": "The way to wrap inheritance lists.",
    "clangFormat.option.BreakStringLiterals.name": "Break String Literals",
    "clangFormat.option.BreakStringLiterals.description": "If true, allows breaking string literals when formatting.",
    "clangFormat.option.BreakTemplateDeclarations.name": "Break Template Declarations",
    "clangFormat.option.BreakTemplateDeclarations.description": "Controls line breaking in template declarations.",
    "clangFormat.option.ColumnLimit.name": "Column Limit",
    "clangFormat.option.ColumnLimit.description": "The column limit. A value of 0 means no column limit.",
    "clangFormat.option.ContinuationIndentWidth.name": "Continuation Indent Width",
    "clangFormat.option.ContinuationIndentWidth.description": "Indent width for line continuations."
}